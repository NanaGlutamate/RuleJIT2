// use {a, x} to stand for list of x split with 'a', {x} for ',' split.

file := package* import* (def | ENDLINE | expr)* $

    PACKAGENAME = [_a-zA-Z\u256-][_0-9a-zA-Z\u256-:]*

    package := 'package' PACKAGENAME ENDLINE

    attrList := ['[' templateArgToken ['(' {(literalExpr | templateArgToken)} ')'] ']']
    // import std:string.string::* //< traits, member function, type itself, etc.
    // import std:string.string::cmp::`>` //< specific function in trait
    import := attrList ['export'] 'import' PACKAGENAME '.' ('TOKEN' '::')* ( '*' | 'TOKEN' 'as' TOKEN) ENDLINE
    def := attrList ['export'] (varDef | constDef | traitDef | typeDef | typeAliasDef | normalFuncDef | memberFuncDef | externFuncDef | traitImplDef)

        varDef := ('var' | 'val') [TOKEN '::'] (TOKEN | '(' {TOKEN} ')') [':' type] '=' expr ENDLINE
        constDef := 'const' TOKEN [':' type] '=' literalExpr ENDLINE
        traitDef := 'trait' templateParamToken [':' {+, templateArgToken}] '{' {funcHead} '}'

            funcHead := 'func' ['unsafe'] ['static'] templateParamToken '(' TOKEN [':' '&'] [',' functionParamList] ')' [':' type]

        typeDef := 'type' templateParamToken ('class' | 'struct') (tupleType | [TOKEN] tupleType ('|' [TOKEN] tupleType)*) ENDLINE
        typeAliasDef := 'type' templateParamToken '=' templateArgToken
        normalFuncDef := 'func' ['unsafe'] templateParamToken '(' functionParamList ')' [':' type] (blockExpr | '=' expr)
        memberFuncDef := 'func' ['unsafe'] templateArgToken '::' templateParamToken '(' TOKEN [':' '&'] [',' functionParamList] ')' [':' type] (blockExpr | '=' expr)
        staticFuncDef := 'func' ['unsafe'] 'static' templateArgToken '::' templateParamToken '(' functionParamList ')' [':' type] (blockExpr | '=' expr)
        externFuncDef := 'extern' 'func' ['unsafe'] TOKEN '(' functionParamList ')' [':' type] ['as' TOKEN] ENDLINE
        traitImplDef := 'impl' templateParam templateArgToken 'for' templateArgToken '{' (templateArgToken ['for' templateArgToken] ENDLINE)* '}'

        functionParam := ([TOKEN] ':' funcParamType | TOKEN)
        functionParamList := ({functionParam} [',' 'varg' functionParam] | 'varg' functionParam)

    expr := [unaryExpr '='] BinOpExpr

        BinOpExpr := unaryExpr | BinOpExpr OP unaryExpr

            unaryExpr := suffixExpr | UOP unaryExpr

                suffixExpr := primaryExpr | memberFuncCallExpr | memberExpr | subscriptExpr | castExpr | typeOrTraitCheckExpr | noneVerifyExpr | staticMemberExpr

                    primaryExpr := identifierExpr | packageExpr | blockExpr | ParenthesesExpr | tupleExpr | constructorOrFuncCallExpr | branchExpr | forLoopExpr | LoopExpr | whereExpr | literalExpr | lambdaExpr

                        identifierExpr := templateArgToken
                        blockExpr := ['unsafe'] '{' (expr ENDLINE | def | specialFuncCall | controlFlowStatement)* [expr] '}'

                            specialFuncCall := 'defer' constructorOrFuncCallExpr ENDLINE
                            controlFlowStatement := returnStatement | breakStatement | continueStatement ENDLINE

                                returnStatement := 'return' [expr]
                                breakStatement := 'break' [expr]
                                // var a = loop { break Opt<i8>::Just(); }; assert(a is Opt<i8>);
                                continueStatement := 'continue'

                        ParenthesesExpr := '(' expr ')'
                        tupleExpr := '(' [(expr ',' | {expr})] ')'
                        constructorOrFuncCallExpr := type '(' {['*'] expr} ')'
                        branchExpr := 'if' '(' [varDef ENDLINE] expr ')' expr ['else' expr]
                        forLoopExpr := 'for' '(' [TOKEN ':' expr] ')' expr
                        whereExpr := 'where' '(' expr ')' '{' whereCase* '}' | 'where' '(' type (',' type)* ')' '{' whereCase* '}'

                            whereCase := ('is' type | literalExpr | TOKEN | [TOKEN] '(' (literalExpr | TOKEN) (',' (literalExpr | TOKEN))* ')') ['if' '(' expr ')'] '=>' expr ENDLINE

                        literalExpr := NUM | STRING | FLOAT | enumMember | BOOLEAN

                            enumMember := templateArgToken '::' TOKEN

                        lambdaExpr := 'func' '(' functionParamList ')' [':' type] expr

                    memberFuncCallExpr := primaryExpr '.' constructorOrFuncCallExpr
                    memberExpr := primaryExpr '.' (TOKEN | KEYWORDS | NUM)
                    subscriptExpr := primaryExpr '[' expr (',' expr)* ']'
                    castExpr := primaryExpr 'as' ['?'] type
                    typeOrTraitCheckExpr := primaryExpr 'is' type
                    noneVerifyExpr := primaryExpr '?'
                    staticMemberExpr := primaryExpr '::' TOKEN

    tupleType := '(' ( | [TOKEN] ':' type ',' | [TOKEN] ':' type ',' [TOKEN] ':' type (',' [TOKEN] ':' type)*) ')'
    type := 'type' | 'dynamic' | templateArgToken | '[' [(NUM | ':') (',' (NUM | ':'))*] ']' type | 'func' ['unsafe'] '(' functionParamList ')' ['->' type] | tupleType
    // 'const' for compile time, will gen function for different arg. must impl 'Eq'
    funcParamType := ['const'] type | '&' ['mut'] type

    templateArgToken := TOKEN [templateArg]
    templateArg := '<' (type | NUM) (',' (type | NUM))* '>'
    templateParamToken := TOKEN [templateParam]
    templateParam := '<' TOKEN [':' templateArgToken ('+' templateArgToken)*] (',' TOKEN [':' templateArgToken ('+' templateArgToken)*])* '>'

    ENDLINE := ';'
    TOKEN := '`' SYM '`' | [_a-zA-Z\u256-][_0-9a-zA-Z\u256-]*
    KEYWORDS := 
    NUM := 
    OP := 
    UOP := 
    BOOLEAN := 'true' | 'false'